---
api:
  name: Transaction
  desc: Ethereum transaction related RPC
  public:
    - name: get_by_block_hash_and_index
      desc: Returns information about a transaction by block hash and transaction index position.
      method: eth_getTransactionByBlockHashAndIndex
      args: ["block_hash", "idx"]
      result: transaction
    - name: get_by_block_number_and_index
      desc: Returns information about a transaction by block number and transaction index position.
      method: eth_getTransactionByBlockNumberAndIndex
      args: ["block_number", "idx"]
      result: transaction
    - name: get_by_hash
      desc: Returns the information about a transaction requested by transaction hash.
      method: eth_getTransactionByHash
      args: ["hash"]
      result: transaction
    - name: get_receipt
      desc: Returns the receipt of a transaction by transaction hash. That the receipt is available even for pending transactions.
      method: eth_getTransactionReceipt
      args: ["hash"]
      result: transaction_receipt
    - name: send_raw
      desc: Creates new message call transaction or a contract creation for signed transactions. Return the tx hash or zero hahs is tx is not yet available.
      method: eth_sendRawTransaction
      args: ["raw_tx"]
    - name: send
      desc: Creates new message call transaction or a contract creation, if the data field contains code. The input is an object, see https://wiki.parity.io/JSONRPC-eth-module.html#eth_sendtransaction
      method: eth_sendTransaction
      args: ["tx_obj"]
    - name: sign
      desc: Signs transactions without dispatching it to the network. It can be later submitted using eth_sendRawTransaction. The input is an object, see https://wiki.parity.io/JSONRPC-eth-module.html#eth_sendtransaction
      method: eth_signTransaction
      args: ["tx_obj"]
      result:
        raw: _
        tx:
          hash: _
          nonce: _
          block_hash: _
          block_number: _
          transaction_index: "&to_int(_)"
          from: _
          to: _
          value: "&to_int(_)"
          gas: "&to_int(_)"
          gas_price: "&to_gwei(_)"
          input: _
    - name: trace
      desc: trace a transaction by its hash
      method: trace_transaction
      args: ["hash"]
      result:
        call_type: action.callType
        from: action.from
        gas_left: "&to_int(action.gas)"
        input: action.input
        to: action.to
        value: "&to_ether(action.value)"
        output: result.output
        gas_used: "&to_int(result.gasUsed)"
        trace_address: _
        error: _
result:
  transaction:
    block_hash: _
    block_height: "&to_int(block_number)"
    from: _
    to: _
    gas_limit: "&to_int(gas)"
    gas_price: "&to_gwei(_)"
    hash: _
    input: _
    nonce: "&to_int(_)"
    public_key: _
    value: "&to_ether(_)"
    index: "&to_int(transaction_index)"
    size: "&get_size(raw)"
    total: "&to_int(value)"
    fees: "&get_fees(*)"
    raw: _
    r: _
    v: _
    standard_v: _
    condition: _
    creates: _
    tx_type: "&get_type(*)"
    gas_used: "&to_int(_)"
    contract_address: _
    cumulative_gas_used: "&to_int(_)"
    logs: _
    logsBloom: _
    root: _
    status: "&to_recepit_status(_)"

  transaction_receipt:
    block_hash: _
    block_number: "&to_int(_)"
    contract_address: _
    from: _
    to: _
    cumulative_gas_used: "&to_int(_)"
    gas_used: "&to_int(_)"
    logs: _
    logsBloom: _
    root: _
    status: "&to_recepit_status(_)"
    transaction_hash: _
    transaction_index: "&to_int(_)"
