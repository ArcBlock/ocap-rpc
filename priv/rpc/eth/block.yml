---
api:
  name: Block
  desc: Ethereum block related RPC
  public:
    - name: get_by_number
      desc: get a block by block height
      method: eth_getBlockByNumber
      args: ["number", "with_tx?"]
      result: block
    - name: get_by_hash
      desc: get a block by block hash, prefixed with "0x"
      method: eth_getBlockByHash
      args: ["hash", "with_tx?"]
      result: block
    - name: get_tx_count_by_hash
      desc: Returns the number of transactions in a block from a block matching the given block hash.
      method: eth_getBlockTransactionCountByHash
      args: ["hash"]
      result: "&to_int(_)"
    - name: get_tx_count_by_number
      desc: Returns the number of transactions in a block from a block matching the given block number.
      method: eth_getBlockTransactionCountByNumber
      args: ["number"]
      result: "&to_int(_)"
    - name: get_uncle_by_hash_and_index
      desc: Returns information about a uncle of a block by hash and uncle index position.
      method: eth_getUncleByBlockHashAndIndex
      args: ["hash", "idx"]
      result: block
    - name: get_uncle_by_number_and_index
      desc: Returns information about a uncle of a block by number and uncle index position.
      method: eth_getUncleByBlockNumberAndIndex
      args: ["number", "idx"]
      result: block
    - name: get_uncle_count_by_hash
      desc: Returns the number of uncles in a block from a block matching the given block hash.
      method: eth_getUncleCountByBlockHash
      args: ["hash"]
      result: "&to_int(_)"
    - name: get_uncle_count_by_number
      desc: Returns the number of uncles in a block from a block matching the given block number.
      method: eth_getUncleCountByBlockNumber
      args: ["number"]
      result: "&to_int(_)"
    - name: trace
      desc: Returns traces created at given block.
      method: trace_block
      args: ["number"]

result:
  block:
    author: _
    miner: _
    difficulty: _
    extra_data: _
    extra_data_plain: "&decode(extra_data)"
    gas_limit: "&to_int(_)"
    gas_used: "&to_int(_)"
    hash: _
    logs_bloom: _
    mix_hash: _
    nonce: _
    height: "&to_int(number)"
    parent_hash: _
    receipts_root: _
    seal_fields: _
    sha3_uncles: _
    uncles: _
    size: "&to_int(_)"
    state_root: _
    time: "&to_date(timestamp)"
    total_difficulty: _
    transactions_root: _
    receipts_root: _
    fees: "&to_int(gas_used)"
    reward: "&to_int(gas_used)"
    transactions:
      block_hash: _
      block_number: "&to_int(_)"
      # chain_id: _
      condition: _
      creates: _
      from: _
      gas: "&to_int(_)"
      gas_price: "&to_gwei(_)"
      hash: _
      input_data: input
      nonce: "&to_int(_)"
      public_key: _
      value: "&to_ether(_)"
      # dive: "&trace_rpc(hash)"
